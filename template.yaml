AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Welcome to Serverless Sushi, the hottest new restaurant in town! As their newly hired developer, you've been tasked with revolutionizing their online ordering system. Let's embark on this exciting journey of building a robust, scalable API using Powertools for AWS Lambda.
  To help you understand how Powertools help you to build APIs, we have created a microservice using Amazon API Gateway, Lambda, and DynamoDB.
  The microservice is deployed on AWS and simulates orders for the new restaurant as we build this API.

# Global definitions
Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Tracing: Active
    Architectures:
      - x86_64
    Runtime: python3.13
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: PowertoolsWorkshop
        POWERTOOLS_METRICS_NAMESPACE: Workshop

Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdersWorkshop
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

  PowertoolsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Events:
        PowertoolsApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PowertoolsRestApi
            Path: /{proxy+}
            Method: ANY
        PowertoolsApiEventOptions:
          Type: Api
          Properties:
            RestApiId: !Ref PowertoolsRestApi
            Path: /{proxy+}
            Method: OPTIONS

  PowertoolsRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: PowertoolsFunctionAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          PowertoolsFunctionAuthorizer:
            FunctionArn: !GetAtt PowertoolsAuthorizerFunction.Arn
            AuthorizerResultTtlInSeconds: 0 # This disables caching for the authorizer

  OrdersAPIPermissions:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdersAPIPermissions
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

  PowertoolsAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: authorizer.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersAPIPermissions

Outputs:
  PowertoolsApi:
    Description: "API Gateway endpoint URL for Prod stage for Powertools Serverless Function"
    Value: !Sub "https://${PowertoolsRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
